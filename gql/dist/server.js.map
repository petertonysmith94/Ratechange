{"version":3,"sources":["../src/server.js"],"names":["require","ApolloServer","fetch","get","typeDefs","resolvers","Query","rates_latest","_","params","build","process","env","EXCHANGE_RATE_API","then","res","json","data","list_currencies","Currencies","currencies","Object","keys","Rates","base","date","rates","amount","map","currency","rate","parseFloat","server","listen","url","console","log"],"mappings":"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","sourcesContent":["const { ApolloServer } = require('apollo-server');\nconst fetch = require('./fetch.js');\nconst { get } = require('lodash');\n\n// The schema for object type definitions \nconst typeDefs = `\n  type Currencies {\n    currencies: [String]\n  }\n\n  type Rate {\n    currency: String\n    rate: Float\n  }\n\n  type Rates {\n    rates: [Rate]\n    base: String\n    date: String\n  }\n\n  type Query {\n    rates_latest(amount: Float, base: String, symbols: String): Rates\n    list_currencies: Currencies\n  }\n`;\n\n// Resolvers are only called when data is requested\nconst resolvers = {\n  Query: {\n    rates_latest: async(_, params) => {\n      const data = await fetch.build(`${ process.env.EXCHANGE_RATE_API }/latest`, {\n        ...params\n      }).then(res => res.json())\n\n      // console.log(data);\n\n      return { data, params };\n    },\n    list_currencies: async(_, params) => fetch.build(`${ process.env.EXCHANGE_RATE_API }/latest`, params).then(res => res.json())\n  },\n  Currencies: {\n    currencies: (data) => Object.keys(get(data, 'rates', {}))\n  },\n  Rates: {\n    base: ({ data }) => get(data, 'base', null),\n    date: ({ data }) => get(data, 'date', null),\n    rates: ({ data, params }) => {\n      const rates = get(data, 'rates', {});\n      const amount = get(params, 'amount', false);\n\n      // Tranform rates into an array\n      return Object.keys(rates).map(currency => {\n        return {\n          currency,\n          rate: amount ? parseFloat(rates[currency]) * parseFloat(amount) : rates[currency]\n        }\n      });\n    }\n  }\n};\n\n// Constructs the server\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers\n});\n\n// Starts the basic apollo server\nserver.listen(3333).then(({ url }) => {\n  console.log(`ğŸš€  Server ready at ${url}`);\n});\n"],"file":"server.js"}