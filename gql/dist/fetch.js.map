{"version":3,"sources":["../src/fetch.js"],"names":["fetch","require","isArray","arrayToUrlString","params","key","slug","reduce","acc","item","index","amp","encodeURIComponent","paramsObjectToUrlString","Object","keys","module","exports","build","url","queryString"],"mappings":";;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;;eACoBA,OAAO,CAAC,QAAD,C;IAAnBC,O,YAAAA,O;AAER;;;;;;;;;AAOA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,MAAD,EAASC,GAAT,EAAcC,IAAd;AAAA,SAAuBF,MAAM,CAACC,GAAD,CAAN,CAAYE,MAAZ,CAAoB,UAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,EAAsB;AACxF,QAAMC,GAAG,GAAGD,KAAK,KAAK,CAAV,GAAc,EAAd,GAAmB,GAA/B;AACA,qBAAWF,GAAX,SAAmBG,GAAnB,SAA2BN,GAA3B,gBAAsCO,kBAAkB,CAACH,IAAD,CAAxD;AACD,GAH+C,EAG7CH,IAH6C,CAAvB;AAAA,CAAzB;AAKA;;;;;;;;AAMA,IAAMO,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACT,MAAD;AAAA,MAASE,IAAT,uEAAgB,EAAhB;AAAA,SAAuBQ,MAAM,CAACC,IAAP,CAAYX,MAAZ,EAAoBG,MAApB,CAA4B,UAACC,GAAD,EAAMH,GAAN,EAAWK,KAAX,EAAqB;AACtG;AACA,QAAIN,MAAM,CAACC,GAAD,CAAN,KAAgB,IAApB,EAA0B;AACxB,UAAMM,GAAG,GAAGD,KAAK,KAAK,CAAV,GAAc,EAAd,GAAmB,GAA/B;;AAEA,UAAIR,OAAO,CAACE,MAAM,CAACC,GAAD,CAAP,CAAX,EAA0B;AACxB,eAAOF,gBAAgB,CAACC,MAAD,EAASC,GAAT,YAAkBG,GAAlB,SAA0BG,GAA1B,EAAvB;AACD;;AACD,uBAAWH,GAAX,SAAmBG,GAAnB,SAA2BN,GAA3B,cAAoCO,kBAAkB,CAACR,MAAM,CAACC,GAAD,CAAP,CAAtD;AACD;;AACD,WAAOG,GAAP;AACD,GAXsD,EAWpDF,IAXoD,CAAvB;AAAA,CAAhC;AAaA;;;;;;;;AAMAU,MAAM,CAACC,OAAP,CAAeC,KAAf,GAAuB,UAASC,GAAT,EAA2B;AAAA,MAAbf,MAAa,uEAAJ,EAAI;AAChD,MAAMgB,WAAW,GAAGP,uBAAuB,CAACT,MAAD,CAA3C;AACA,SAAOJ,KAAK,WAAKmB,GAAL,SAAaC,WAAW,cAAQA,WAAR,IAAyB,EAAjD,EAAZ;AACD,CAHD","sourcesContent":["const fetch = require('node-fetch');\nconst { isArray } = require('lodash');\n\n/**\n * Transforms an array into an encoded URI string \n * \n * @param {object} params \n * @param {string} key\n * @param {string} slug\n */\nconst arrayToUrlString = (params, key, slug) => params[key].reduce( (acc, item, index) => {\n  const amp = index === 0 ? '' : '&';\n  return `${ acc }${ amp }${ key }[]=${ encodeURIComponent(item) }`;\n}, slug);\n\n/**\n * Transforms an object of parameters into a URL encoded query string\n * \n * @param {object} params   An object of URL parameters to be encode\n * @param {string} slug     The inital slug for the URL\n */\nconst paramsObjectToUrlString = (params, slug = '') => Object.keys(params).reduce( (acc, key, index) => {\n  // Ensures the parameter \n  if (params[key] !== null) {\n    const amp = index === 0 ? '' : '&';\n\n    if (isArray(params[key])) {\n      return arrayToUrlString(params, key, `${ acc }${ amp }`);\n    }\n    return `${ acc }${ amp }${ key }=${ encodeURIComponent(params[key]) }`;\n  }\n  return acc;\n}, slug);\n\n/**\n * A wrapper around fetch to handle query parameter transformation\n * \n * @param {string} url      The base url\n * @param {object} params   An object with the parameters\n */\nmodule.exports.build = function(url, params = {}) {\n  const queryString = paramsObjectToUrlString(params);\n  return fetch(`${ url }${ queryString ? `?${ queryString }` : '' }`)\n};"],"file":"fetch.js"}